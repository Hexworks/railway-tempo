stream_over_http_enabled: true
server:
  http_listen_address: '::0'
  http_listen_port: 3100
  log_level: info
  
memberlist:
  bind_addr:
    - '::'
  bind_port: 7946
  
query_frontend:
  search:
    duration_slo: 5s
    throughput_bytes_slo: 1.073741824e+09
  trace_by_id:
    duration_slo: 5s

distributor:
# this configuration will listen on all ports and protocols that tempo is capable of.
  receivers:
#    jaeger: # the receives all come from the OpenTelemetry collector.  more configuration information can
#      protocols: # be found there: https://github.com/open-telemetry/opentelemetry-collector/tree/main/receiver
#        thrift_http: #
#        grpc: # for a production deployment you should only enable the receivers you need!
#        thrift_binary:
#        thrift_compact:
#    zipkin:
    otlp:
      protocols:
        http:
#        grpc:
#    opencensus:

ingester:
  lifecycler:
    address: '::'
    enable_inet6: true

compactor:
  ring:
    kvstore:
      store: memberlist
    enable_inet6: true

metrics_generator:
  ring:
    enable_inet6: true
  registry:
    external_labels:
      source: tempo
      cluster: docker-compose
  storage:
    path: /var/tempo/generator/wal
    remote_write:
      - url: http://prometheus:9090/api/v1/write
        send_exemplars: true
  traces_storage:
    path: /var/tempo/generator/traces

storage:
  trace:
    backend: local # backend configuration to use
    wal:
      path: /var/tempo/wal # where to store the the wal locally
    local:
      path: /var/tempo/blocks

overrides:
  defaults:
    metrics_generator:
      processors: [service-graphs, span-metrics, local-blocks] # enables metrics generatorv
